openapi: 3.0.3
info:
  title: Barckend
  description: Backend bar API for bar reservation system
  version: 1.0.0

tags:
  - name: Authorizing
    description: Owner and admin authorization
  - name: Profile
    description: Profile management
  - name: Bar
    description: Bar management
  - name: Table
    description: Table management
  - name: Reservation
    description: Reservation management

paths:

  /register/admin:
    post:
      tags:
        - Authorizing
      security: [ ]
      summary: Register new admin profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterAdmin'
      responses:
        200:
          description: Registration is successful
        400:
          description: Invalid information provided

  /register/owner:
    post:
      tags:
        - Authorizing
      security: [ ]
      summary: Register new owner
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterOwner'
      responses:
        200:
          description: Registration is successful
        400:
          description: Invalid information provided

  /login:
    post:
      tags:
        - Authorizing
      security: [ ]
      summary: Get authorization tokens with email and password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginInput'
      responses:
        200:
          description: Returns access and refresh tokens
          content:
            application/json:
              schema:
                properties:
                  role:
                    type: integer
                    description: Define a role of profile. 1 - owner, 2 - admin
                  access_token:
                    type: string
                    description: Access token to access authorized zone methods
                  refresh_token:
                    type: string
                    description: Refresh token to retrieve access tokens
        400:
          description: No user with provided credentials

  /me:
    get:
      tags:
        - Profile
      summary: Get current profile
      responses:
        200:
          description: Admin profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminProfileResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    patch:
      tags:
        - Profile
      description: Update profile info
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfile'
      responses:
        200:
          description: Returns updated admin profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminProfileResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        400:
          description: Invalid update parameters

  /bar/create:
    post:
      tags:
        - Bar
      description: Create bar with provided parameters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBar'
      responses:
        200:
          description: Bar is created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BarInfoResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        400:
          description: Invalid create parameters

  /bar/{bar_id}:
    get:
      tags:
        - Bar
      description: Returns information about bar
      parameters:
        - in: path
          name: bar_id
          description: Id of the bar
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Information about bar
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BarInfoResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/BarNotFound'
    patch:
      tags:
        - Bar
      description: Update bar and return information about it
      parameters:
        - in: path
          name: bar_id
          description: Id of the bar
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBar'
      responses:
        200:
          description: Updated information about bar
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BarInfoResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/BarNotFound'

  /bar/{bar_id}/logo:
    put:
      tags:
        - Bar
      description: Upload bar logo
      parameters:
        - in: path
          name: bar_id
          description: Id of the bar
          schema:
            type: integer
          required: true
      requestBody:
        content:
          image/jpeg:
            schema:
              type: string
              format: binary
          image/png:
            schema:
              type: string
              format: binary
      responses:
        200:
          description: Logo successfully uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhotoLink'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/BarNotFound'

  /table/create:
    post:
      tags:
        - Table
      summary: Create table
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTable'
      responses:
        200:
          description: Table is created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TableInfoResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        400:
          description: Invalid information is provided

  /table/all?bar_id={bar_id}:
    get:
      tags:
        - Table
      parameters:
        - in: query
          name: bar_id
          schema:
            type: integer
          required: true
      summary: Get list of created tables
      responses:
        200:
          description: Returns list of all tables
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TableInfoResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /table/{table_id}:
    get:
      tags:
        - Table
      summary: Get information about table
      parameters:
        - in: path
          name: table_id
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Successful update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TableInfoResponse'
        404:
          $ref: '#/components/responses/TableNotFound'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    patch:
      tags:
        - Table
      summary: Update an existing table
      parameters:
        - in: path
          name: table_id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTable'
      responses:
        200:
          description: Successful update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TableInfoResponse'
        404:
          $ref: '#/components/responses/TableNotFound'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      parameters:
        - in: path
          name: table_id
          schema:
            type: integer
          required: true
      tags:
        - Table
      description: Delete an existing table
      responses:
        200:
          description: Successful deletion
        404:
          $ref: '#/components/responses/TableNotFound'
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /reserv/all:
    get:
      tags:
        - Reservation
      description: Returns list of table reservations for specified dates
      parameters:
        - in: query
          name: dates
          schema:
            type: array
            items:
              $ref: '#/components/schemas/DateString'
            example: [22.09.2022, 23.09.2022]
          required: true
        - in: query
          name: table_id
          schema:
            type: integer
          required: true
      responses:
        200:
          description: List of reservations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReservationResponse'
        404:
          $ref: '#/components/responses/TableNotFound'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        400:
          description: Invalid date format

  /reserv/{reserv_id}:
    post:
      tags:
        - Reservation
      parameters:
        - in: path
          name: reserv_id
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationResponse'
        404:
          $ref: '#/components/responses/ReservationNotFound'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    patch:
      tags:
        - Reservation
      description: Modify reservation with provided id
      parameters:
        - in: path
          name: reserv_id
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyReservation'
      responses:
        200:
          description: Updating is successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        400:
          description: Can't modify reservation with provided parameters
        404:
          $ref: '#/components/responses/ReservationNotFound'
    delete:
      tags:
        - Reservation
      description: Modify reservation with provided id
      parameters:
        - in: path
          name: reserv_id
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Deleting is successful
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/ReservationNotFound'


components:
  schemas:

    RegisterAdmin:
      type: object
      required: [name, surname, patronymic, password, email, phone]
      properties:
        name:
          $ref: '#/components/schemas/Name'
        surname:
          $ref: '#/components/schemas/Surname'
        patronymic:
          $ref: '#/components/schemas/Patronymic'
        email:
          $ref: '#/components/schemas/Email'
        phone:
          $ref: '#/components/schemas/PhoneNumber'
        password:
          $ref: '#/components/schemas/Password'

    RegisterOwner:
      type: object
      required: [name, surname, patronymic, password, email, phone]
      properties:
        name:
          $ref: '#/components/schemas/Name'
        surname:
          $ref: '#/components/schemas/Surname'
        patronymic:
          $ref: '#/components/schemas/Patronymic'
        email:
          $ref: '#/components/schemas/Email'
        phone:
          $ref: '#/components/schemas/PhoneNumber'
        password:
          $ref: '#/components/schemas/Password'

    UpdateProfile:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        surname:
          $ref: '#/components/schemas/Surname'
        patronymic:
          $ref: '#/components/schemas/Patronymic'
        email:
          $ref: '#/components/schemas/Email'
        phone:
          $ref: '#/components/schemas/PhoneNumber'

    CreateBar:
      type: object
      required: [email, name, phone, description, address, work_hours]
      properties:
        email:
          $ref: '#/components/schemas/Email'
        name:
          $ref: '#/components/schemas/BarName'
        description:
          $ref: '#/components/schemas/BarDescription'
        address:
          $ref: '#/components/schemas/BarAddress'
        phone:
          $ref: '#/components/schemas/PhoneNumber'
        work_hours:
          $ref: '#/components/schemas/WorkHoursArray'

    UpdateBar:
      type: object
      properties:
        email:
          $ref: '#/components/schemas/Email'
        name:
          $ref: '#/components/schemas/BarName'
        description:
          $ref: '#/components/schemas/BarDescription'
        address:
          $ref: '#/components/schemas/BarAddress'
        phone:
          $ref: '#/components/schemas/PhoneNumber'
        work_hours:
          $ref: '#/components/schemas/WorkHoursArray'
        is_visible:
          type: boolean
          description: Define whether bar is visible for clients
        admin_ids:
          type: array
          items:
            type: integer

    WorkHoursArray:
      type: array
      items:
        $ref: '#/components/schemas/WorkHoursItem'

    WorkHoursItem:
      type: object
      required: [from ,to]
      properties:
        weekday:
          type: integer
          minimum: 1
          maximum: 7
          description: Weekday number [1 - Monday ... 7 - Sunday]
        from:
          $ref: '#/components/schemas/TimeString'
        to:
          $ref: '#/components/schemas/TimeString'

    LoginInput:
      type: object
      required: [email, password]
      properties:
        email:
          $ref: '#/components/schemas/Email'
        password:
          type: string
          example: testPass123
          maxLength: 30

    CreateTable:
      type: object
      required: [bar_id, name, persons]
      properties:
        bar_id:
          $ref: '#/components/schemas/Identifier'
        name:
          $ref: '#/components/schemas/TableName'
        persons:
          $ref: '#/components/schemas/TablePersons'
        description:
          $ref: '#/components/schemas/TableDescription'

    UpdateTable:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/TableName'
        persons:
          $ref: '#/components/schemas/TablePersons'
        description:
          $ref: '#/components/schemas/TableDescription'

    ModifyReservation:
      type: object
      properties:
        time:
          $ref: '#/components/schemas/TimeString'
        date:
          $ref: '#/components/schemas/DateString'

    BarInfoResponse:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Identifier'
        owner_id:
          $ref: '#/components/schemas/Identifier'
        email:
          $ref: '#/components/schemas/Email'
        phone:
          $ref: '#/components/schemas/PhoneNumber'
        address:
          $ref: '#/components/schemas/BarAddress'
        name:
          $ref: '#/components/schemas/BarName'
        description:
          $ref: '#/components/schemas/BarDescription'
        logo_url:
          $ref: '#/components/schemas/PhotoLink'
        is_visible_for_clients:
          type: boolean
          description: Define whether bar is visible for clients to reserve
        admin_ids:
          type: array
          items:
            type: integer

    TableInfoResponse:
      type: object
      required: [id, name, persons]
      properties:
        id:
          $ref: '#/components/schemas/Identifier'
        bar_id:
          $ref: '#/components/schemas/Identifier'
        name:
          type: string
          example: Table 42
          maxLength: 30
        persons:
          $ref: '#/components/schemas/TablePersons'
        description:
          type: string
          example: Near the window
          maxLength: 100

    AdminProfileResponse:
      type: object
      required: [id, email, name]
      properties:
        id:
          $ref: '#/components/schemas/Identifier'
        name:
          $ref: '#/components/schemas/Name'
        surname:
          $ref: '#/components/schemas/Surname'
        patronymic:
          $ref: '#/components/schemas/Patronymic'
        email:
          $ref: '#/components/schemas/Email'
        phone:
          $ref: '#/components/schemas/PhoneNumber'

    GuestResponse:
      type: object
      required: [id, name, photo_url, phone_number]
      properties:
        id:
          $ref: '#/components/schemas/Identifier'
        name:
          type: string
          maxLength: 30
        photo_url:
          type: string
          example: http://10.11.0.64/images/1oc1km1wkm.png
        phone_number:
          $ref: '#/components/schemas/PhoneNumber'

    Identifier:
      type: integer
      format: int64
      example: 1
      minimum: 1

    Password:
      type: string
      example: Sga12^q#daA
      minLength: 6
      maxLength: 40

    Name:
      type: string
      example: Никита
      minLength: 3
      maxLength: 50

    Surname:
      type: string
      example: Рыжков
      minLength: 3
      maxLength: 50

    Patronymic:
      type: string
      example: Максимович
      minLength: 3
      maxLength: 50

    Email:
      type: string
      format: email
      example: example@mail.ru
      minLength: 7
      maxLength: 30

    PhoneNumber:
      type: string
      example: 79776540078
      minLength: 11
      maxLength: 11

    BarAddress:
      type: string
      example: Nevsky prospect, 16
      maxLength: 100

    BarName:
      type: string
      example: Old friends
      minLength: 3
      maxLength: 50

    BarDescription:
      type: string
      example: The bar with the most delicious cocktails in the town
      maxLength: 400

    TablePersons:
      type: integer
      example: 4
      minimum: 1

    TableName:
      type: string
      example: Table 42
      maxLength: 30

    TableDescription:
      type: string
      example: Near the window
      maxLength: 100

    PhotoLink:
      type: string
      example: https://123.45.678.9/images/sajJInK1N21.png
      maxLength: 100

    TimeString:
      type: string
      minLength: 5
      maxLength: 5
      example: 10:00

    DateString:
      type: string
      minLength: 10
      maxLength: 10
      example: 22.09.2022

    ReservationResponse:
      type: object
      required: [id, table_id, guest, date, time]
      properties:
        id:
          $ref: '#/components/schemas/Identifier'
        table_id:
          $ref: '#/components/schemas/Identifier'
        guest:
          $ref: '#/components/schemas/GuestResponse'
        date:
          $ref: '#/components/schemas/DateString'
        time:
          $ref: '#/components/schemas/TimeString'
        comment:
          type: string
          example: We need some wines until we arrive
          maxLength: 100

  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
    ReservationNotFound:
      description: No reservation with provided id
    TableNotFound:
      description: No table with provided id
    BarNotFound:
      description: No bar with provided id

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: [ ]
